plugins {
    id 'java'
    id 'io.qameta.allure' version '2.8.1'
    id 'io.freefair.lombok' version '5.3.0'
    id 'org.hidetake.swagger.generator' version '2.18.2'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
}

group 'com.petstore'
version '0.0.1-SNAPSHOT'

sourceCompatibility = 1.11

repositories {
    jcenter()
    mavenLocal()
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom('org.junit:junit-bom:5.7.0')
        mavenBom('org.springframework.boot:spring-boot-dependencies:2.3.8.RELEASE') {
            bomProperties([
                    'junit-jupiter.version': '5.7.0',
                    'rest-assured.version' : '4.3.3',
                    'assertj.version'      : '3.19.0'
            ])
        }
    }
}

dependencies {
    swaggerCodegen 'io.swagger:swagger-codegen-cli:2.4.2'
    implementation 'io.swagger:swagger-annotations:1.5.15'
    implementation 'io.gsonfire:gson-fire:1.8.2'
    implementation 'com.squareup.okio:okio:1.13.0'
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
    implementation 'io.rest-assured:rest-assured'
    implementation 'org.apache.logging.log4j:log4j-iostreams'

    implementation 'io.qameta.allure:allure-junit5:2.13.7'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.platform:junit-platform-console'
}

configurations.all {
    exclude module: 'spring-boot-starter-logging'
}

allure {
    autoconfigure = true
    version = '2.13.7'

    useJUnit5 {
        version = '2.13.7'
    }
}

test {
    useJUnitPlatform() {
        if (System.getProperty('includeTags')) {
            includeTags System.getProperty('includeTags').split(',')
        }
        if (System.getProperty('excludeTags')) {
            includeTags System.getProperty('excludeTags').split(',')
        }
    }

    testLogging {
        exceptionFormat 'full'
        events 'started', 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
    }

    systemProperties([
            'PETSTORE_URL'                                  : System.getProperty('PETSTORE_URL', 'https://petstore.swagger.io/v2'),
            'junit.jupiter.extensions.autodetection.enabled': System.getProperty('rp.enable', 'false'),
            'rp.enable'                                     : System.getProperty('rp.enable', 'false')
    ])

}

task downloadSwaggerJson {
    doLast {
        def file = new FileOutputStream('swagger-json/petstore.json')
        def out = new BufferedOutputStream(file)
        out << new URL('https://petstore.swagger.io/v2/swagger.json').openStream()
        out.close()
    }
}

swaggerSources {
    petstore {
        inputFile = file('swagger-json/petstore.json')
        code {
            language = 'java'
            configFile = file('codegen-config.json')
            components = [
                    models         : true,
                    modelDocs      : false,
                    apis           : ['Store', 'Pet'],
                    apiTests       : false,
                    supportingFiles: ['ApiClient.java', 'JSON.java']
            ]
        }
    }
}

// Configure compile task dependency and source
resolveSwaggerTemplate.dependsOn downloadSwaggerJson
compileJava.dependsOn swaggerSources.petstore.code
sourceSets.main.java.srcDir "${swaggerSources.petstore.code.outputDir}/src/main/java"
sourceSets.main.resources.srcDir "${swaggerSources.petstore.code.outputDir}/src/main/resources"

clean {
    delete 'swagger-json/petstore.json'
}

tasks.withType(Tar) {
    compression = Compression.GZIP
}

// generate fat jar with tests

import com.github.jengelman.gradle.plugins.shadow.transformers.PropertiesFileTransformer

shadowJar {
    zip64 true
    classifier ''
    archiveVersion.set ''
    duplicatesStrategy = DuplicatesStrategy.WARN
    manifest {
        attributes 'Main-Class': 'org.junit.platform.console.ConsoleLauncher'
    }
    from sourceSets.test.output
    configurations = [project.configurations.testRuntimeClasspath]
    exclude '**/Log4j2Plugins.dat'

    // Required for Spring Boot
    mergeServiceFiles()
    append 'META-INF/spring.handlers'
    append 'META-INF/spring.schemas'
    append 'META-INF/spring.tooling'
    transform(PropertiesFileTransformer) {
        paths = ['META-INF/spring.factories']
        mergeStrategy = "append"
    }
}

generateLombokConfig.enabled false
